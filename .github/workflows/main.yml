- name: Create scraper script
  run: |
    cat << 'EOF' > scraper.js
    const puppeteer = require('puppeteer');
    const fs = require('fs');

    const urls = [
      'https://www.gledaitv.fan/nova-live-tv.html',
      'https://www.gledaitv.fan/btv-live-tv.html',
      'https://www.gledaitv.fan/mtv-hits-live-tv.html',
      'https://www.gledaitv.fan/mtv-00s-live-tv.html',
      'https://smotret-tv.live/mezzo.html'
    ];

    (async () => {
      const browser = await puppeteer.launch({
        headless: true,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      });

      const results = [];

      for (const site of urls) {
        const page = await browser.newPage();
        const customUA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36';
        await page.setUserAgent(customUA);

        let playlistLink = null;
        let playlistHeaders = null;

        const isSmotret = site.startsWith('https://smotret-tv.live/');

        // Catch .m3u8 links
        page.on('request', request => {
          const url = request.url();

          if (isSmotret) {
            // Only strict .m3u8 endings for smotret-tv
            if (/^https?:\/\/[^\s'"]+\.m3u8$/i.test(url) && !playlistLink) {
              playlistLink = url;
              playlistHeaders = request.headers();
            }
          } else {
            // Allow .m3u8 with query tokens for other sites
            if (url.match(/\.m3u8(\?.*)?$/i) && !playlistLink) {
              playlistLink = url;
              playlistHeaders = request.headers();
            }
          }
        });

        await page.goto(site, { waitUntil: 'networkidle2' });
        await new Promise(resolve => setTimeout(resolve, 5000));

        // Fallback: scan HTML for .m3u8
        if (!playlistLink) {
          const html = await page.content();
          let matches = [];

          if (isSmotret) {
            // Only strict .m3u8 for smotret-tv
            const regex = /https?:\/\/[^\s'"]+\.m3u8(?=(?:['"\s<>)]|$))/gi;
            matches = html.match(regex)?.filter(m => /\.m3u8$/i.test(m)) || [];
          } else {
            const regex = /https?:\/\/[^\s'"]+\.m3u8[^\s'"]*/gi;
            matches = html.match(regex) || [];
          }

          if (matches.length > 0) {
            playlistLink = matches[0];
            playlistHeaders = {
              'referer': site,
              'user-agent': customUA,
              'origin': new URL(site).origin
            };
          }
        }

        await page.close();

        if (!playlistLink) {
          console.error(`No playlist link found for ${site}`);
          continue;
        }

        const formattedHeaders = [];
        if (playlistHeaders['referer']) formattedHeaders.push(`Referer: ${playlistHeaders['referer']}`);
        if (playlistHeaders['user-agent']) formattedHeaders.push(`User-Agent: ${playlistHeaders['user-agent']}`);
        if (playlistHeaders['origin']) formattedHeaders.push(`Origin: ${playlistHeaders['origin']}`);

        const title = site.split('/').filter(Boolean).pop().replace(/\.html$/i, '');

        results.push({
          title,
          updated: new Date().toISOString(),
          url: playlistLink,
          headers: formattedHeaders.join('\n')
        });
      }

      await browser.close();

      fs.writeFileSync('channels.json', JSON.stringify(results, null, 2));
      console.log('All playlist links saved to channels.json:\n', results);
    })();
    EOF
