// This script is ready to be run via GitHub Actions with puppeteer-extra, stealth, and outputs channels.json.
// It strictly extracts .m3u8 links from smotret-tv.live, as per your requirements.

const puppeteer = require('puppeteer-extra');
const StealthPlugin = require('puppeteer-extra-plugin-stealth');
const fs = require('fs');

puppeteer.use(StealthPlugin());

const urls = [
  'https://smotret-tv.live/mezzo.html'
];

const delay = ms => new Promise(res => setTimeout(res, ms));

(async () => {
  const browser = await puppeteer.launch({
    headless: true, // Use headless:true for GitHub Actions
    args: ['--no-sandbox', '--disable-setuid-sandbox']
  });

  const results = [];

  for (const site of urls) {
    try {
      const page = await browser.newPage();

      const customUA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36';
      await page.setUserAgent(customUA);
      await page.setViewport({ width: 1280, height: 800 });

      let playlistLink = null;
      let playlistHeaders = null;

      // === Strict request listener: only accept URLs that end EXACTLY with ".m3u8" ===
      page.on('request', request => {
        const url = request.url();
        // Only match if the whole URL ends with .m3u8 (no ? or #)
        if (/^https?:\/\/[^\s'"]+\.m3u8$/i.test(url) && !playlistLink) {
          playlistLink = url;
          playlistHeaders = request.headers();
          console.log('FOUND strict .m3u8 via request:', playlistLink);
        }
      });

      await page.goto(site, { waitUntil: 'networkidle2', timeout: 60000 });

      // Wait for Cloudflare (30â€“40 sec)
      await delay(30000 + Math.random() * 10000);

      try {
        await page.waitForSelector('body', { timeout: 60000 });
      } catch {
        console.warn(`Timeout waiting for page content on ${site}`);
      }

      // === Fallback: scan HTML but only accept literal links that end with .m3u8 ===
      if (!playlistLink) {
        const html = await page.content();

        // This regex finds http(s) links whose path ends with ".m3u8" and is immediately followed
        // by a quote, whitespace, angle bracket, closing parenthesis or end-of-string.
        // It will NOT match ".m3u8?token=..." or ".m3u8#frag".
        const regex = /https?:\/\/[^\s'"]+?\.m3u8(?=(?:['"\s<>)]|$))/gi;
        const matches = html.match(regex) || [];

        // Extra safety: ensure the extracted string literally ends with ".m3u8"
        const strictMatches = matches.filter(m => /\.m3u8$/i.test(m));

        if (strictMatches.length > 0) {
          playlistLink = strictMatches[0];
          playlistHeaders = {
            'referer': site,
            'user-agent': customUA,
            'origin': new URL(site).origin
          };
          console.log('FOUND strict .m3u8 via HTML scan:', playlistLink);
        }
      }

      await page.close();

      if (!playlistLink) {
        console.error(`No strict .m3u8 link found for ${site}`);
        continue;
      }

      const formattedHeaders = [];
      if (playlistHeaders?.referer) formattedHeaders.push(`Referer: ${playlistHeaders.referer}`);
      if (playlistHeaders?.['user-agent']) formattedHeaders.push(`User-Agent: ${playlistHeaders['user-agent']}`);
      if (playlistHeaders?.origin) formattedHeaders.push(`Origin: ${playlistHeaders.origin}`);

      const title = site.split('/').filter(Boolean).pop().replace(/\.html$/i, '');

      results.push({
        title,
        updated: new Date().toISOString(),
        url: playlistLink,
        headers: formattedHeaders.join('\n')
      });

    } catch (err) {
      console.error(`Error processing ${site}:`, err.message);
    }
  }

  await browser.close();

  fs.writeFileSync('channels.json', JSON.stringify(results, null, 2));
  console.log('All strict playlist links saved to channels.json');
})();
