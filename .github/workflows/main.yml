name: Run M3U Scraper

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */1 * * *"

jobs:
  scrape:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: |
          npm install puppeteer-extra puppeteer-extra-plugin-stealth puppeteer

      - name: Install Chrome dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ca-certificates fonts-liberation libasound2 libatk-bridge2.0-0 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgbm1 libgcc1 libglib2.0-0 libgtk-3-0 libnspr4 libnss3 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 lsb-release wget xdg-utils

      - name: Create scraper script
        run: |
          cat << 'EOF' > scraper.js
          const puppeteer = require('puppeteer-extra');
          const StealthPlugin = require('puppeteer-extra-plugin-stealth');
          const fs = require('fs');

          puppeteer.use(StealthPlugin());

          const urls = [
            'https://smotret-tv.live/mezzo.html'
          ];

          const delay = ms => new Promise(res => setTimeout(res, ms));

          (async () => {
            const browser = await puppeteer.launch({
              headless: true,
              args: [
                '--no-sandbox',
                '--disable-setuid-sandbox',
                '--disable-dev-shm-usage',
                '--disable-accelerated-2d-canvas',
                '--no-first-run',
                '--no-zygote',
                '--disable-gpu'
              ]
            });

            const results = [];

            for (const site of urls) {
              try {
                const page = await browser.newPage();

                const customUA = 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/116.0.0.0 Safari/537.36';
                await page.setUserAgent(customUA);
                await page.setViewport({ width: 1280, height: 800 });

                let playlistLink = null;
                let playlistHeaders = null;

                // === Strict request listener: only accept URLs that end EXACTLY with ".m3u8" ===
                page.on('request', request => {
                  const url = request.url();
                  // Only match if the whole URL ends with .m3u8 (no ? or #)
                  if (/^https?:\/\/[^\s'"]+\.m3u8$/i.test(url) && !playlistLink) {
                    playlistLink = url;
                    playlistHeaders = request.headers();
                    console.log('FOUND strict .m3u8 via request:', playlistLink);
                  }
                });

                await page.goto(site, { waitUntil: 'networkidle2', timeout: 60000 });

                // Wait 30â€“40 sec for Cloudflare (as before)
                await delay(30000 + Math.random() * 10000);

                try {
                  await page.waitForSelector('body', { timeout: 60000 });
                } catch {
                  console.warn(`Timeout waiting for page content on ${site}`);
                }

                // === Fallback: scan HTML but only accept literal links that end with .m3u8 ===
                if (!playlistLink) {
                  const html = await page.content();

                  // This regex finds http(s) links whose path ends with ".m3u8" and is immediately followed
                  // by a quote, whitespace, angle bracket, closing parenthesis or end-of-string.
                  // It will NOT match ".m3u8?token=..." or ".m3u8#frag".
                  const regex = /https?:\/\/[^\s'"]+?\.m3u8(?=(?:['"\s<>)]|$))/gi;
                  const matches = html.match(regex) || [];

                  // Extra safety: ensure the extracted string literally ends with ".m3u8"
                  const strictMatches = matches.filter(m => /\.m3u8$/i.test(m));

                  if (strictMatches.length > 0) {
                    playlistLink = strictMatches[0];
                    playlistHeaders = {
                      'referer': site,
                      'user-agent': customUA,
                      'origin': new URL(site).origin
                    };
                    console.log('FOUND strict .m3u8 via HTML scan:', playlistLink);
                  }
                }

                await page.close();

                if (!playlistLink) {
                  console.error(`No strict .m3u8 link found for ${site}`);
                  continue;
                }

                const formattedHeaders = [];
                if (playlistHeaders?.referer) formattedHeaders.push(`Referer: ${playlistHeaders.referer}`);
                if (playlistHeaders?.['user-agent']) formattedHeaders.push(`User-Agent: ${playlistHeaders['user-agent']}`);
                if (playlistHeaders?.origin) formattedHeaders.push(`Origin: ${playlistHeaders.origin}`);

                const title = site.split('/').filter(Boolean).pop().replace(/\.html$/i, '');

                results.push({
                  title,
                  updated: new Date().toISOString(),
                  url: playlistLink,
                  headers: formattedHeaders.join('\n')
                });

              } catch (err) {
                console.error(`Error processing ${site}:`, err.message);
              }
            }

            await browser.close();

            fs.writeFileSync('channels.json', JSON.stringify(results, null, 2));
            console.log('All strict playlist links saved to channels.json');
          })();
          EOF

      - name: Run scraper
        run: node scraper.js
        timeout-minutes: 10

      - name: Commit & Push JSON
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add channels.json
          git commit -m "Update channels list" || echo "No changes to commit"
          git push
